package com.pokemon.demo.service;

import com.pokemon.demo.entity.Game;
import com.pokemon.demo.repository.GameRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class GameDataImportService {

    private final DataRefreshService dataRefreshService;
    private final CsvService csvService;
    private final GameRepository gameRepository;


    @Autowired
    public GameDataImportService (DataRefreshService dataRefreshService,
                                  CsvService csvService, GameRepository gameRepository) {
        this.dataRefreshService = dataRefreshService;
        this.csvService = csvService;
        this.gameRepository = gameRepository;
    }

    public void executeScriptAndProcessData() {
        // Execute the Python script
        dataRefreshService.refreshData().thenAccept(result -> {
            if ("success".equals(result)) {
                processAndStoreCsvData();
            } else {
                System.out.println("Script execution failed.");
            }
        });
    }

    @Transactional
    protected void processAndStoreCsvData() {
        // Path to the CSV file generated by the Python script
        List<Game> games = csvService.readCsv
                ("/Users/anthonylam/Desktop/FullStack Pokemon Price Project/PokemonPricePython/src/pokemon_games_prices.csv");

        /* Need to avoid the case of adding duplicate games in the Database */
        for (Game game: games) {
            // First find the game by title in the repository
            gameRepository.findByTitle(game.getTitle())
                    .ifPresentOrElse(exisitingGame ->  {
                            exisitingGame.setLoosePrice(game.getLoosePrice());
                            exisitingGame.setCibPrice(game.getCibPrice());
                            exisitingGame.setNewPrice(game.getNewPrice());
                            gameRepository.save(exisitingGame);

            }, () ->
                            /* Else just save the game since it's new and not in the database */
                            gameRepository.save(game));

        }
    }
}
